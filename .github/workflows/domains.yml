---
name: Emergency lockdown for all environments

"on":
  workflow_dispatch:
    inputs:
      state:
        description: "State of lock: present/absent"
        type: choice
        required: true
        options:
          - present
          - absent
        default: "present"

permissions:
  contents: read
  packages: read

env:
  ANSIBLE_FORCE_COLOR: "True"
  ANSIBLE_LOG_FOLDER: logs

jobs:
  lockdown_critical:
    # environment: lockdown
    # environment: critical
    runs-on: ubuntu-20.04
    # env:
    #   ANSIBLE_INVENTORY: "inventories/critical/,secret_inventories/critical/,inventories/ci_user.yml"
    #   matrix_host_inventory: "inventories/critical/"
    #   # sops_key: secret must be used directly in environment-restricted jobs
    #   encrypted_ssh_key: .github/secrets/critical/ssh_private_key.sops
    #   encrypted_ci_env: ""
    # container:
    #   image: ghcr.io/lidofinance/ci:stable
    #   credentials:
    #     username: ${{ github.repository_owner }}
    #     password: ${{secrets.GITHUB_TOKEN }}

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v3
      #   with:
      #     persist-credentials: false

      # - name: Validate inputs
      #   run: scripts/validate_inputs.py
      #   env:
      #     INPUTS: ${{ toJSON(inputs) }}

      - name: Record domain list
        run: |
          domains="easytrack.lido.fi,polygon.lido.fi,solana.lido.fi,stake.lido.fi,trp.lido.fi,vote.lido.fi"
          echo "domain_list=$domains" >> $GITHUB_ENV
        env:
          INPUTS: ${{ toJSON(inputs) }}

      - name: Show the action to be executed
        run: |
          if [ "${{ github.event.inputs.state }}" == "present" ]; then
            echo "Enabling lockdown page for the following domains: ${{ env.domain_list }}"
          else
            echo "Disabling lockdown page for the following domains: ${{ env.domain_list }}"
          fi

      # - name: Open sops secrets
      #   uses: ./.github/actions/import_sops_secrets
      #   with:
      #     sops_key: "${{ secrets.SOPS_CRITICAL }}"
      #     encrypted_ssh_key: ${{ env.encrypted_ssh_key }}
      #     encrypted_ci_env: ${{ env.encrypted_ci_env }}

      - name: Lockdown
        run: echo ansible-playbook
          playbooks/lockdown.yaml
          -e lockdown_domain_list=${{ env.domain_list }}
          -e lockdown_state=${{ github.event.inputs.state }}
        working-directory: ansible

  lockdown_mainnet:
    # environment: lockdown
    # environment: production
    runs-on: ubuntu-20.04
    # env:
    #   ANSIBLE_INVENTORY: "inventories/mainnet/,secret_inventories/mainnet/,inventories/ci_user.yml"
    #   matrix_host_inventory: "inventories/mainnet/"
    #   # sops_key: secret must be used directly in environment-restricted jobs
    #   encrypted_ssh_key: .github/secrets/mainnet/ssh_private_key.sops
    #   encrypted_ci_env: ""
    # container:
    #   image: ghcr.io/lidofinance/ci:stable
    #   credentials:
    #     username: ${{ github.repository_owner }}
    #     password: ${{secrets.GITHUB_TOKEN }}

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v3
      #   with:
      #     persist-credentials: false

      # - name: Validate inputs
      #   run: scripts/validate_inputs.py
      #   env:
      #     INPUTS: ${{ toJSON(inputs) }}

      - name: Record domain list
        run: |
          domains="operators.lido.fi,yiasucosme.lido.fi"
          echo "domain_list=$domains" >> $GITHUB_ENV
        env:
          INPUTS: ${{ toJSON(inputs) }}

      - name: Show the action to be executed
        run: |
          if [ "${{ github.event.inputs.state }}" == "present" ]; then
            echo "Enabling lockdown page for the following domains: ${{ env.domain_list }}"
          else
            echo "Disabling lockdown page for the following domains: ${{ env.domain_list }}"
          fi

      # - name: Open sops secrets
      #   uses: ./.github/actions/import_sops_secrets
      #   with:
      #     sops_key: "${{ secrets.SOPS_MAINNET }}"
      #     encrypted_ssh_key: ${{ env.encrypted_ssh_key }}
      #     encrypted_ci_env: ${{ env.encrypted_ci_env }}

      - name: Lockdown
        run: echo ansible-playbook
          playbooks/lockdown.yaml
          -e lockdown_domain_list=${{ env.domain_list }}
          -e lockdown_state=${{ github.event.inputs.state }}
        working-directory: ansible
